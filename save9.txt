import PropTypes from "prop-types";
import { useState, useEffect } from "react";
import Modal from "react-modal"; // Import react-modal


export default function GetInfo(props) {
    const token = import.meta.env.VITE_REACT_APP_API_KEY;

    const [userData, setUserData] = useState([]);
    const [username, setUsername] = useState([]);
    const [repos, setRepos] = useState([]);
    const [showModal, setShowModal] = useState(false);
    const [selectedUserRepos, setSelectedUserRepos] = useState([]);


    useEffect(() => {
        async function fetchUserData() {
            try {
                const res = await fetch(`https://api.github.com/search/users?q=${props.user}&per_page=5`
                    , {
                        header: {
                            Authorization: `Bearer ${token}`
                        }
                    }
                );

                const data = await res.json();
                setUsername(data.items);

            } catch (error) {
                console.error("Error fetching user data:", error);
            }
        }

        fetchUserData();
    }, [props.user, token]);



    useEffect(() => {
        const fetchData = async () => {
            if (username && Array.isArray(username)) {
                try {
                    const fetchedData = await Promise.all(username.map(async (element) => {
                        const response = await fetch(`https://api.github.com/users/${element.login}`
                            , {
                                header: {
                                    Authorization: `Bearer ${token}`
                                }
                            }
                        );

                        return response.json();
                    }));
                    setUserData(fetchedData);
                } catch (error) {
                    console.error("Error fetching data:", error);
                }
            }
        };

        fetchData();
    }, [username, token]);






    const fetchRepos = async (mts) => {
        try {

            const response = await fetch(`https://api.github.com/users/${mts}/repos`
                , {
                    header: {
                        Authorization: `Bearer ${token}`
                    }
                }
            );

            const reposData = await response.json();
            props.repo(reposData)
            setRepos(reposData);
            setShowModal(true);
            setSelectedUserRepos(reposData);
        } catch (error) {
            console.error("Error fetching repositories:", error);
        }
    };

    const handleCloseModal = () => {
        setShowModal(false);
    };
    const handleLikeButton = (userLogin) => {
        props.like(userLogin);
    };

    // console.log(userData)

    return (
        <>
            {userData && userData.length > 0 && (
                <div>
                    {userData.map((user) => (
                        <div key={user.id} className="info">
                            <div className="profile-img">

                                <img src={user.avatar_url} alt={user.login} />
                            </div>
                            <div className="profile-info">

                                <h1>{user.login}</h1>
                                <span>
                                    Followers: {user.followers}
                                </span>
                                <span>
                                    Following: {user.following}                                </span>
                                <h1>Public Repos: {user.public_repos}</h1>
                                <button
                                    className="like"
                                    onClick={() => handleLikeButton(user.login)}
                                    disabled={props.liked.includes(user.login)}
                                >
                                    {props.liked.includes(user.login) ? 'liked' : 'like'}

                                    {/* {props.isLike ? 'liked' : 'like'} */}
                                </button>
                                <button
                                    className="show-repo"
                                    onClick={() => fetchRepos(user.login)}
                                >
                                    Show Repo
                                </button>
                                
                            </div>
                        </div>
                    ))}
                </div>
            )}

            {showModal && (
                <div className="modal">
                    <div className="modal-content">
                        <span className="close" onClick={handleCloseModal}>
                            &times;
                        </span>
                        <h2>Repositories</h2>
                        <ul>
                            {selectedUserRepos.map((repo) => (
                                <li key={repo.id}>{repo.name}</li>
                            ))}
                        </ul>
                    </div>
                </div>
            )}
        </>
    );
}

GetInfo.propTypes = {
    user: PropTypes.string.isRequired,
    repo: PropTypes.func.isRequired,
    like: PropTypes.func.isRequired,
    liked: PropTypes.array.isRequired,
};
